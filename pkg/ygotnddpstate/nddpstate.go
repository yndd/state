/*
Package ygotnddpstate is a generated package which contains definitions
of structs which represent a YANG schema. The generated schema can be
compressed by a series of transformations (compression was false
in this case).

This package was generated by /Users/henderiw/CodeProjects/tmp/ygot/genutil/names.go
using the following YANG input files:
	- /Users/henderiw/CodeProjects/yang/nddp/0_1_0/combined/nddp-state.yang
Imported modules were sourced from:
	- /Users/henderiw/CodeProjects/yang/nddp/0_1_0/combined/...
*/
package ygotnddpstate

import (
	"encoding/json"
	"fmt"
	"reflect"

	"github.com/openconfig/goyang/pkg/yang"
	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// Binary is a type that is used for fields that have a YANG type of
// binary. It is used such that binary fields can be distinguished from
// leaf-lists of uint8s (which are mapped to []uint8, equivalent to
// []byte in reflection).
type Binary []byte

// YANGEmpty is a type that is used for fields that have a YANG type of
// empty. It is used such that empty fields can be distinguished from boolean fields
// in the generated code.
type YANGEmpty bool

// UnionInt8 is an int8 type assignable to unions of which it is a subtype.
type UnionInt8 int8

// UnionInt16 is an int16 type assignable to unions of which it is a subtype.
type UnionInt16 int16

// UnionInt32 is an int32 type assignable to unions of which it is a subtype.
type UnionInt32 int32

// UnionInt64 is an int64 type assignable to unions of which it is a subtype.
type UnionInt64 int64

// UnionUint8 is a uint8 type assignable to unions of which it is a subtype.
type UnionUint8 uint8

// UnionUint16 is a uint16 type assignable to unions of which it is a subtype.
type UnionUint16 uint16

// UnionUint32 is a uint32 type assignable to unions of which it is a subtype.
type UnionUint32 uint32

// UnionUint64 is a uint64 type assignable to unions of which it is a subtype.
type UnionUint64 uint64

// UnionFloat64 is a float64 type assignable to unions of which it is a subtype.
type UnionFloat64 float64

// UnionString is a string type assignable to unions of which it is a subtype.
type UnionString string

// UnionBool is a bool type assignable to unions of which it is a subtype.
type UnionBool bool

// UnionUnsupported is an interface{} wrapper type for unsupported types. It is
// assignable to unions of which it is a subtype.
type UnionUnsupported struct {
	Value interface{}
}

var (
	SchemaTree map[string]*yang.Entry
)

func init() {
	var err error
	if SchemaTree, err = UnzipSchema(); err != nil {
		panic("schema error: " + err.Error())
	}
}

// Schema returns the details of the generated schema.
func Schema() (*ytypes.Schema, error) {
	uzp, err := UnzipSchema()
	if err != nil {
		return nil, fmt.Errorf("cannot unzip schema, %v", err)
	}

	return &ytypes.Schema{
		Root:       &Device{},
		SchemaTree: uzp,
		Unmarshal:  Unmarshal,
	}, nil
}

// UnzipSchema unzips the zipped schema and returns a map of yang.Entry nodes,
// keyed by the name of the struct that the yang.Entry describes the schema for.
func UnzipSchema() (map[string]*yang.Entry, error) {
	var schemaTree map[string]*yang.Entry
	var err error
	if schemaTree, err = ygot.GzipToSchema(ySchema); err != nil {
		return nil, fmt.Errorf("could not unzip the schema; %v", err)
	}
	return schemaTree, nil
}

// Unmarshal unmarshals data, which must be RFC7951 JSON format, into
// destStruct, which must be non-nil and the correct GoStruct type. It returns
// an error if the destStruct is not found in the schema or the data cannot be
// unmarshaled. The supplied options (opts) are used to control the behaviour
// of the unmarshal function - for example, determining whether errors are
// thrown for unknown fields in the input JSON.
func Unmarshal(data []byte, destStruct ygot.ValidatedGoStruct, opts ...ytypes.UnmarshalOpt) error {
	tn := reflect.TypeOf(destStruct).Elem().Name()
	schema, ok := SchemaTree[tn]
	if !ok {
		return fmt.Errorf("could not find schema for type %s", tn)
	}
	var jsonTree interface{}
	if err := json.Unmarshal([]byte(data), &jsonTree); err != nil {
		return err
	}
	return ytypes.Unmarshal(schema, destStruct, jsonTree, opts...)
}

// Device represents the /device YANG schema element.
type Device struct {
	StateEntry map[string]*NddpState_StateEntry `path:"state-entry" module:"nddp-state"`
}

// IsYANGGoStruct ensures that Device implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Device) IsYANGGoStruct() {}

// NewStateEntry creates a new entry in the StateEntry list of the
// Device struct. The keys of the list are populated from the input
// arguments.
func (t *Device) NewStateEntry(Name string) (*NddpState_StateEntry, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.StateEntry == nil {
		t.StateEntry = make(map[string]*NddpState_StateEntry)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.StateEntry[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list StateEntry", key)
	}

	t.StateEntry[key] = &NddpState_StateEntry{
		Name: &Name,
	}

	return t.StateEntry[key], nil
}

// GetOrCreateStateEntry retrieves the value with the specified keys from
// the receiver Device. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Device) GetOrCreateStateEntry(Name string) *NddpState_StateEntry {

	key := Name

	if v, ok := t.StateEntry[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewStateEntry(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateStateEntry got unexpected error: %v", err))
	}
	return v
}

// GetStateEntry retrieves the value with the specified key from
// the StateEntry map field of Device. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Device) GetStateEntry(Name string) *NddpState_StateEntry {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.StateEntry[key]; ok {
		return lm
	}
	return nil
}

// DeleteStateEntry deletes the value with the specified keys from
// the receiver Device. If there is no such element, the function
// is a no-op.
func (t *Device) DeleteStateEntry(Name string) {
	key := Name

	delete(t.StateEntry, key)
}

// AppendStateEntry appends the supplied NddpState_StateEntry struct to the
// list StateEntry of Device. If the key value(s) specified in
// the supplied NddpState_StateEntry already exist in the list, an error is
// returned.
func (t *Device) AppendStateEntry(v *NddpState_StateEntry) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.StateEntry == nil {
		t.StateEntry = make(map[string]*NddpState_StateEntry)
	}

	if _, ok := t.StateEntry[key]; ok {
		return fmt.Errorf("duplicate key for list StateEntry %v", key)
	}

	t.StateEntry[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Device) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Device"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Device) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module in whose namespace
// Device belongs.
func (*Device) ΛBelongingModule() string {
	return ""
}

// NddpState_StateEntry represents the /nddp-state/state-entry YANG schema element.
type NddpState_StateEntry struct {
	AdminState  E_NddpCommon_AdminState `path:"admin-state" module:"nddp-state"`
	Description *string                 `path:"description" module:"nddp-state"`
	Name        *string                 `path:"name" module:"nddp-state"`
	Path        []string                `path:"path" module:"nddp-state"`
	Prefix      *string                 `path:"prefix" module:"nddp-state"`
}

// IsYANGGoStruct ensures that NddpState_StateEntry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NddpState_StateEntry) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the NddpState_StateEntry struct, which is a YANG list entry.
func (t *NddpState_StateEntry) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NddpState_StateEntry) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NddpState_StateEntry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NddpState_StateEntry) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module in whose namespace
// NddpState_StateEntry belongs.
func (*NddpState_StateEntry) ΛBelongingModule() string {
	return "nddp-state"
}

// E_NddpCommon_AdminState is a derived int64 type which is used to represent
// the enumerated node NddpCommon_AdminState. An additional value named
// NddpCommon_AdminState_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_NddpCommon_AdminState int64

// IsYANGGoEnum ensures that NddpCommon_AdminState implements the yang.GoEnum
// interface. This ensures that NddpCommon_AdminState can be identified as a
// mapped type for a YANG enumeration.
func (E_NddpCommon_AdminState) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  NddpCommon_AdminState.
func (E_NddpCommon_AdminState) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum }

// String returns a logging-friendly string for E_NddpCommon_AdminState.
func (e E_NddpCommon_AdminState) String() string {
	return ygot.EnumLogString(e, int64(e), "E_NddpCommon_AdminState")
}

const (
	// NddpCommon_AdminState_UNSET corresponds to the value UNSET of NddpCommon_AdminState
	NddpCommon_AdminState_UNSET E_NddpCommon_AdminState = 0
	// NddpCommon_AdminState_enable corresponds to the value enable of NddpCommon_AdminState
	NddpCommon_AdminState_enable E_NddpCommon_AdminState = 1
	// NddpCommon_AdminState_disable corresponds to the value disable of NddpCommon_AdminState
	NddpCommon_AdminState_disable E_NddpCommon_AdminState = 2
)

// ΛEnum is a map, keyed by the name of the type defined for each enum in the
// generated Go code, which provides a mapping between the constant int64 value
// of each value of the enumeration, and the string that is used to represent it
// in the YANG schema. The map is named ΛEnum in order to avoid clash with any
// valid YANG identifier.
var ΛEnum = map[string]map[int64]ygot.EnumDefinition{
	"E_NddpCommon_AdminState": {
		1: {Name: "enable"},
		2: {Name: "disable"},
	},
}

var (
	// ySchema is a byte slice contain a gzip compressed representation of the
	// YANG schema from which the Go code was generated. When uncompressed the
	// contents of the byte slice is a JSON document containing an object, keyed
	// on the name of the generated struct, and containing the JSON marshalled
	// contents of a goyang yang.Entry struct, which defines the schema for the
	// fields within the struct.
	ySchema = []byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x59, 0x5d, 0x6f, 0xd3, 0x30,
		0x14, 0x7d, 0xef, 0xaf, 0x30, 0x06, 0xc4, 0x57, 0xc3, 0xd2, 0xd1, 0xae, 0x5b, 0x10, 0x82, 0x42,
		0x3b, 0x21, 0xed, 0x83, 0x89, 0x21, 0x1e, 0x18, 0x65, 0x98, 0xf8, 0x36, 0xb3, 0x48, 0x9d, 0xc8,
		0x71, 0xc6, 0x0a, 0x94, 0xdf, 0x8e, 0xf2, 0x41, 0x49, 0xd2, 0xd8, 0x49, 0xb6, 0x17, 0x8a, 0x92,
		0x87, 0x69, 0xb3, 0x4f, 0x7c, 0x8f, 0xaf, 0xcf, 0x3d, 0xf6, 0x9c, 0x1f, 0x1d, 0x84, 0x10, 0xc2,
		0xc7, 0x64, 0x0e, 0xd8, 0x42, 0x98, 0xc2, 0x25, 0xb3, 0x01, 0x77, 0x93, 0xd6, 0x03, 0xc6, 0x29,
		0xb6, 0x50, 0x2f, 0xfd, 0xf3, 0x95, 0xc7, 0x67, 0xcc, 0xc1, 0x16, 0x32, 0xd3, 0x86, 0x31, 0x13,
		0xd8, 0x42, 0xc9, 0x10, 0x71, 0x43, 0x20, 0x89, 0x04, 0x03, 0xb8, 0x14, 0x8b, 0x5c, 0x47, 0x2e,
		0x46, 0x16, 0xd4, 0xcd, 0x43, 0xf2, 0x01, 0x57, 0xcd, 0xc5, 0xc0, 0xab, 0x8e, 0x13, 0x01, 0x33,
		0x76, 0xb5, 0x16, 0x2a, 0x17, 0x8e, 0x53, 0xea, 0x19, 0x71, 0xcc, 0x42, 0xb4, 0x18, 0x75, 0xea,
		0x85, 0xc2, 0x86, 0xd2, 0x11, 0x12, 0x46, 0xb0, 0xf8, 0xe6, 0x89, 0x88, 0x14, 0xf6, 0x93, 0x60,
		0xdd, 0x72, 0xe0, 0x6b, 0x12, 0x8c, 0x84, 0x13, 0xce, 0x81, 0x4b, 0x6c, 0x21, 0x29, 0x42, 0x50,
		0x00, 0x33, 0xa8, 0x2c, 0xb7, 0x35, 0xf0, 0x32, 0xd7, 0xb2, 0x2c, 0xcc, 0xbc, 0x98, 0xfa, 0x55,
		0x07, 0xa1, 0x73, 0xc6, 0xd3, 0x31, 0x95, 0xb3, 0xfa, 0x93, 0x9b, 0x2c, 0x58, 0x41, 0x77, 0x0c,
		0x33, 0x12, 0xba, 0x11, 0xdb, 0xb3, 0x52, 0x40, 0x0c, 0x02, 0x4e, 0xbe, 0xb8, 0x25, 0x73, 0x88,
		0x9e, 0xa9, 0x62, 0xe0, 0x74, 0xad, 0x4d, 0x45, 0xb7, 0x6a, 0xcd, 0xeb, 0xac, 0x7d, 0x33, 0x0d,
		0xd4, 0xd5, 0x42, 0x63, 0x4d, 0x34, 0xd6, 0x46, 0x63, 0x8d, 0x94, 0x6b, 0x45, 0xa1, 0x99, 0xd5,
		0xe8, 0xef, 0x16, 0x3e, 0xd4, 0xcb, 0x5b, 0xb5, 0x3e, 0x72, 0x65, 0xdb, 0xd7, 0x60, 0x26, 0x3c,
		0x9c, 0x47, 0x41, 0x15, 0x54, 0x3b, 0x35, 0xc8, 0x63, 0x0a, 0x81, 0x2d, 0x98, 0x2f, 0x99, 0xc7,
		0xab, 0xb5, 0x9d, 0x05, 0xb7, 0x12, 0xdc, 0x58, 0x09, 0x56, 0x2f, 0x63, 0x4e, 0x82, 0xbb, 0x1a,
		0xcc, 0x21, 0x70, 0x47, 0x5e, 0x68, 0x9d, 0x2c, 0x7a, 0xf4, 0xa9, 0x8f, 0x47, 0x3a, 0x62, 0xbc,
		0x72, 0x8d, 0x56, 0xe0, 0xf7, 0xc4, 0x0d, 0x61, 0x7d, 0x57, 0x53, 0xe2, 0xf7, 0x05, 0xb1, 0xa3,
		0xe9, 0x8e, 0x99, 0xc3, 0x64, 0xa0, 0x96, 0xdf, 0x7a, 0xca, 0xc0, 0x21, 0x92, 0x5d, 0x46, 0xb1,
		0x66, 0xc4, 0x0d, 0xa0, 0xf2, 0xad, 0x65, 0xb7, 0xc6, 0x54, 0xc9, 0x55, 0xf3, 0xa9, 0x6e, 0x0f,
		0x06, 0xff, 0xde, 0x64, 0x3b, 0xd7, 0xeb, 0x9d, 0x6a, 0x14, 0x75, 0x42, 0xa4, 0x04, 0xc1, 0x2b,
		0x25, 0x85, 0xcf, 0x46, 0xc6, 0x07, 0x62, 0x7c, 0x37, 0x8d, 0x3d, 0x74, 0xeb, 0xc5, 0xed, 0x3b,
		0x77, 0x3f, 0x7d, 0x0c, 0x4d, 0x73, 0x7b, 0xe7, 0xfe, 0x83, 0x9f, 0x8f, 0x9e, 0x7d, 0xfe, 0xf5,
		0xb8, 0x7b, 0x6f, 0xeb, 0xdc, 0x7a, 0xfa, 0xdc, 0x98, 0x3e, 0x54, 0x17, 0xd8, 0xf4, 0x06, 0xc6,
		0xc9, 0x93, 0x62, 0xaa, 0x70, 0xcc, 0x18, 0xd5, 0x5a, 0xe5, 0xc6, 0x5a, 0xa5, 0x66, 0xfd, 0x5a,
		0x8f, 0x6c, 0x3d, 0xb2, 0xf5, 0x48, 0xad, 0x47, 0xfa, 0x24, 0xd6, 0x7d, 0x85, 0x47, 0xc6, 0xa8,
		0xd6, 0x23, 0x37, 0xd6, 0x23, 0x03, 0x29, 0x18, 0x77, 0x6a, 0xb9, 0x64, 0x23, 0x06, 0x87, 0x2c,
		0x90, 0x23, 0x29, 0x85, 0x9e, 0xc5, 0x11, 0xe3, 0x13, 0x17, 0xa2, 0x3c, 0x54, 0x94, 0x71, 0x64,
		0x29, 0x19, 0x64, 0x6f, 0xb7, 0xdf, 0xdf, 0x19, 0xf6, 0xfb, 0xe6, 0xf0, 0xc9, 0xd0, 0xdc, 0x1b,
		0x0c, 0x7a, 0x3b, 0x3d, 0x8d, 0x79, 0xe0, 0x37, 0x82, 0x82, 0x00, 0xfa, 0x72, 0x81, 0x2d, 0xc4,
		0x43, 0xd7, 0xbd, 0x49, 0x55, 0xe8, 0x35, 0xf9, 0xb7, 0x2e, 0xb4, 0x97, 0x23, 0x6d, 0x65, 0xb4,
		0xa7, 0x87, 0xf6, 0xf4, 0xd0, 0x9e, 0x1e, 0xfe, 0x93, 0xd3, 0x83, 0xf6, 0x66, 0xf6, 0x00, 0x16,
		0x8a, 0x72, 0xd2, 0x6f, 0x12, 0xd5, 0x9b, 0xc3, 0xb5, 0x36, 0x05, 0xfd, 0x66, 0x50, 0x24, 0x3f,
		0xe2, 0xdc, 0x93, 0x44, 0x79, 0xc1, 0x86, 0x03, 0xfb, 0x02, 0xe6, 0x24, 0x3d, 0x2a, 0xe1, 0x2d,
		0x4e, 0xa9, 0x9f, 0xf8, 0xd5, 0x96, 0xfa, 0x56, 0x3f, 0xfd, 0x32, 0x20, 0x42, 0x5b, 0xa6, 0xff,
		0x87, 0xe2, 0x63, 0x4a, 0xfd, 0xd3, 0xe8, 0x85, 0xf3, 0xf8, 0xe7, 0x24, 0x7e, 0xab, 0x53, 0x9e,
		0xe3, 0xe4, 0xb7, 0x94, 0xa8, 0x8a, 0x20, 0x66, 0xc1, 0x3e, 0xf9, 0x0a, 0x6f, 0x3d, 0x6f, 0xdd,
		0x75, 0x8b, 0xa4, 0x71, 0xb6, 0x2b, 0x47, 0x6b, 0x9c, 0x7c, 0xfd, 0x48, 0x02, 0x76, 0x96, 0xbf,
		0x01, 0x00, 0x00, 0xff, 0xff, 0x01, 0x00, 0x00, 0xff, 0xff, 0xa0, 0x1c, 0x90, 0xce, 0x1c, 0x19,
		0x00, 0x00,
	}
)

// ΛEnumTypes is a map, keyed by a YANG schema path, of the enumerated types that
// correspond with the leaf. The type is represented as a reflect.Type. The naming
// of the map ensures that there are no clashes with valid YANG identifiers.
var ΛEnumTypes = map[string][]reflect.Type{
	"/state-entry/admin-state": []reflect.Type{
		reflect.TypeOf((E_NddpCommon_AdminState)(0)),
	},
}
